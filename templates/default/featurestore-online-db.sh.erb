#!/usr/bin/env bash

#
# This script is used to create/remove a MySQL Cluster database for each online featurestore and to manage project-user's access to that database.
# Data owners in a project get ALL PRIVILEGES, data scientists get only SELECT privileges.
# Script operations: add, rm, update (change role of project-user)
#

help() {
    echo ""
    echo "usage: $0 add databasename db_username DATA_OWNER|DATA_SCIENTIST db_passwords_file | rm databasename db_username | change databasename db_username DATA_OWNER|DATA_SCIENTIST"
    echo ""
    exit 1
}

if [ $# -lt 3 ]; then
    help
fi

MYSQL_CMD="sudo <%= node['ndb']['dir'] %>/mysql-cluster/ndb/scripts/mysql-client.sh -e"
ROLE=
OWNER=0
RES=0

# Check mysql database name is valid syntactically
# https://stackoverflow.com/questions/9537771/mysql-database-name-restrictions
# if [ "$DB_NAME" =~ "^[^\\/?%*:|\"<>.]{1,64}$" ]; then
DB_NAME=$2
#if [ "$DB_NAME" =~ ";" ]; then
#   echo "Invalid database name. Note: the string length for the database name must be >2 and <=64 and it must contain valid characters."
#   exit 2
#fi

DB_USER=$3


role() {
  echo "Role passed was: $ROLE"
  if [ "$ROLE" == "DATA_OWNER" ] ; then
      OWNER=1
      echo "Data owner role enabled"      
  elif [ "$ROLE" == "DATA_SCIENTIST" ] ; then
      echo "Data scientist role enabled"
  else
      echo "Invalid role passeed: $ROLE"
      exit 4
  fi
}

grant() {
 if [ $OWNER -eq 1 ] ; then
   $MYSQL_CMD "GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO \"$DB_USER\"@'%'"
 else
   $MYSQL_CMD "GRANT SELECT ON ${DB_NAME}.* TO \"$DB_USER\"@'%'"	   
 fi
 RES=$?
 if [ $RES -ne 0 ]; then
   echo "Problem granting privileges to $DB_USER on $DB_NAME with role: $OWNER"
 fi
}

if [ $# -gt 3 ]; then
  ROLE=$4
  role
fi

#
# Add a user to a project (create database if it doesn't exist)
# 
if [ "$1" == "add" ] ; then

  if [ $# -lt 5 ]; then
    help
  fi

  test -f $5
  if [ $? -ne 0 ] ; then
    echo "Invalid password file passed: $5"
    exit 5
  fi
  
  DB_PWD=$(head -1 $5)
  RES=$?
  echo "Removing passwords file
  rm -f $5
  if [ $RES -ne 0 ]; then
      echo "Problem getting credentials from file passed by Hopsworks: $5"
      exit 5
  fi
  # if [ "$DB_PWD" =~ ";" ]; then
  #  echo "Invalid database password character ';'"
  #  exit 5
  # fi
  
  $MYSQL_CMD "CREATE DATABASE IF NOT EXISTS $DB_NAME"
  RES=$?
  if [ $RES -eq 0 ]; then
     $MYSQL_CMD "CREATE USER IF NOT EXISTS \"$DB_USER\"@'%' IDENTIFIED BY \"$DB_PWD\""
     RES=$?     
     if [ $RES -eq 0 ]; then
       grant
     else
       echo "Problem creating user in mysql: $DB_USER with password $DB_PWD"
     fi
  fi
  exit $RES

#
# Remove a user from a project, or remove 'all' users from a project and drop the database
# 
elif [ "$1" == "rm" ] ; then

  if [ "$DB_USER" == "all" ] ; then

    $MYSQL_CMD "DROP DATABASE IF EXISTS $DB_NAME"
    if [ $? -ne 0 ]; then
       echo "Problem when trying to drop the database $DB_NAME"
    fi
    #  SELECT user FROM mysql.user where user like "$DB_NAME_%";
    #  then loop through all returned users
    #    $MYSQL_CMD "DROP USER IF EXISTS \"$DB_USER\"@'%'" SELECT user FROM mysql.user where user like "$DB_NAME_%";
    list_users=$(sudo <%= node['ndb']['dir'] %>/mysql-cluster/ndb/scripts/mysql-client.sh -N -e "SELECT GROUP_CONCAT(User) FROM mysql.user WHERE USER LIKE \"${DB_NAME}_%\"" | tail -2 | tail -1 | sed "s/,/ /g")
    for i in $list_users
    do
      $MYSQL_CMD "DROP USER IF EXISTS \"${i}\"@'%'"	
      if [ $? -ne 0 ]; then
        echo "Problem when trying to drop the user \"${i}\"@'%'"
	RES=2  
      fi
    done      
  else
    $MYSQL_CMD "DROP USER IF EXISTS \"$DB_USER\"@'%'"
    if [ $? -ne 0 ]; then
      echo "Problem when trying to drop the user $DB_USER"
      RES=2  	
    fi
  fi
  
#
# Change the role of a user in a project
# 
elif [ "$1" == "update" ] ; then
  if [ $# -lt 4 ]; then
    help
  fi
  $MYSQL_CMD "REVOKE ALL PRIVILEGES ON ${DB_NAME}.* FROM \"$DB_USER\"@'%'"
  RES=$?     
  if [ $RES -ne 0 ]; then
    echo "Problem revoking privileges for ${DB_USER} on ${DB_NAME}"
  fi
  grant
  
#
# invalid command
#
else

 help
fi 

echo "Script finised with res: $RES"

exit $RES
